#!/bin/bash -x

exec > /tmp/bootstrap.log 2>&1


# gitlab endpoint config
gitlab_ee_version=${gitlab_ee_version}
dns_fqdn=${dns_fqdn}

# restore config
restore_enabled=${gitlab_ee_restore_enabled}
restore_s3_file=${gitlab_ee_restore_s3_file}

# backup config
backups_s3_bucket_region=${backups_s3_bucket_region}
backups_s3_bucket=${backups_s3_bucket}
backups_local_path=/opt/gitlab/backups

# tls config
tls_cert_selfsigned=true
tls_cert_selfsigned_subject="/CN=$dns_fqdn"
tls_cert_selfsigned_san=$dns_fqdn
tls_cert_parameter_store=false

# aws config
aws_region=${ssm_region}

# ssm config
ssm_parameter_root_password=${ssm_parameter_root_password}
ssm_parameter_runner_registration_token=${ssm_parameter_runner_registration_token}

# secretsmanager config
secretsmanager_secret_gitlab_secrets_json="${secretsmanager_secret_gitlab_secrets_json}"
gitlab_secrets_json_local_path="/etc/gitlab/gitlab-secrets.json"

# disk config
disk=${secondary_block_device}
vgname=vg-data
lvname=lv-data
mount_path=/opt
fstype=xfs


function install_helper_functions(){
  cat > etc/profile.d/helper-functions.sh <<EOF
function secret_exists(){
  aws secretsmanager list-secrets --filters Key=name,Values=\$1 |
  python -c 'import json,sys; secret=json.load(sys.stdin)["SecretList"];sys.exit(0) if len(secret) == 1 else sys.exit(1)'
}

function get_secret_value(){
  if secret_exists \$1; then
    aws secretsmanager get-secret-value --secret-id \$1 |
    python -c 'import json,sys; secret=json.load(sys.stdin)["SecretString"]; print(secret)'
  fi
}

function create_or_update_secret(){
  if secret_exists \$1; then
    aws secretsmanager update-secret \\
      --secret-id \$1 \\
      --secret-string \$2
  else
    aws secretsmanager create-secret \\
      --name \$1 \\
      --secret-string \$2
  fi
}

function gitlab_ok(){
  curl -k -s https://localhost/-/readiness |
  python -c 'import json,sys;

try:
  status = json.load(sys.stdin)["status"]; sys.exit(0) if status == "ok" else sys.exit(1)
except Exception as e:
  sys.exit(1)
'
}

function waitfor_gitlab_ok(){
  until gitlab_ok; do echo "gitlab is unavailable; waiting"; sleep 5; done
  echo 'gitlab is up'
}

function gitlab_restore_from_s3(){
  gitlab_s3_backup_file=\$1
  gitlab_backup_name=\$(basename "\$gitlab_s3_backup_file" |sed -e 's/_gitlab_backup.tar//')
  backups_local_dir=\$2
  secretsmanager_secret_gitlab_secrets_json=\$3
  gitlab_secrets_json=\$4

  echo "==> copying backup \$gitlab_s3_backup_file from s3"
  aws s3 cp \$gitlab_s3_backup_file \$backups_local_dir

  echo "==> getting gitlab-secrets.json from secretsmanager"
  get_secret_value \$secretsmanager_secret_gitlab_secrets_json > \$${gitlab_secrets_json}.restore

  echo "==> stopping unicorn, puma, and sidekiq services"
  gitlab-ctl stop unicorn && \
  gitlab-ctl stop puma && \
  gitlab-ctl stop sidekiq && \
  gitlab-ctl status

  echo "==> services unicorn, puma, and sidekiq stopped"
  (cd \$backups_local_dir && force=yes gitlab-backup restore BACKUP=\$gitlab_backup_name)
  echo "==> gitlab-backup restore completed"

  echo "==> restoring gitlab-secrets.json"
  mv -f \$${gitlab_secrets_json}.restore \$${gitlab_secrets_json}

  echo "==> restarting gitlab"
  gitlab-ctl reconfigure
  gitlab-ctl restart
  gitlab-rake gitlab:check SANITIZE=true

  waitfor_gitlab_ok
}
EOF
}

function setup_data_volume(){
  # install lvm package
  yum -y install the lvm2

  # setup the lvm physical volume
  if grep -q "$disk" <<<$(pvs 2>/dev/null); then
    echo "physical volume $disk already exists. skipping pvcreate."
  else
    pvcreate $disk
  fi

  # setup the lvm volume group
  if grep -q "$vgname" <<<$(vgs 2>/dev/null); then
    echo "volume group $vgname already exists. skipping vgcreate."
  else
    vgcreate $vgname /dev/nvme1n1
  fi

  # setup the lvm logical volume
  if grep -q "$lvname $vgname" <<<$(lvs 2>/dev/null); then
    echo "logical volume $lvname already exists. skipping lvcreate."
  else
    lvcreate -n $lvname -l 100%FREE $vgname
  fi


  # setup the filesystem
  mkfscmd="mkfs.$${fstype}"

  if grep -qi "$fstype" <<<$(file -sL /dev/$vgname/$lvname); then
    echo "filesystem already exists on /dev/$vgname/$lvname. skipping $${mkfscmd}."
  else
    $mkfscmd /dev/$vgname/$lvname
  fi

  mkdir -p $mount_path

  block_uuid=$(blkid /dev/$vgname/$lvname|awk '{print $2}'|sed 's/"//g')
  if grep -q "$block_uuid" /etc/fstab ; then
    echo "device $block_uuid $mount_path already exists in fstab. skipping append record to fstab."
  else
    echo "$block_uuid $mount_path    $fstype    defaults    0 0" >> /etc/fstab
  fi

  mount -a
}

function install_awscli_bundle(){
    yum -y install unzip
    curl "https://s3.amazonaws.com/aws-cli/awscli-bundle.zip" -o "awscli-bundle.zip"
    unzip awscli-bundle.zip
    ./awscli-bundle/install -i /usr/local/aws -b /usr/local/bin/aws
    rm -f awscli-bundle.zip
}

function install_gitlab(){
    yum install -y curl policycoreutils-python
    curl https://packages.gitlab.com/install/repositories/gitlab/gitlab-ee/script.rpm.sh | bash
    _gitlab_ee_version=$(yum list gitlab-ee --showduplicates | grep $gitlab_ee_version|sort -r|tail -1|awk '{print $2}'|sed 's/.*://g')
    yum install -y gitlab-ee-$${_gitlab_ee_version}
}

function ssm_get_parameter(){
  aws --region $aws_region ssm get-parameters --name $1 --with-decryption| python -c 'import json,sys;print json.load(sys.stdin)["Parameters"][0]["Value"]'
}



#### setup environment
source /root/.bashrc


#### prep system, install configuration deps, and install the application
setup_data_volume
install_awscli_bundle
install_helper_functions
install_gitlab


#### configure the application
server_certificate_path=/etc/gitlab/ssl/server.crt
server_certificate_key_path=/etc/gitlab/ssl/server.key

mkdir -p /etc/gitlab/ssl
chmod 0700 /etc/gitlab/ssl


#### setup a self signed certificate when tls_cert_selfsigned is true. (this is the only option available currently)
if [ "$tls_cert_selfsigned" = "true" ]; then
    openssl req -new -nodes -x509 -subj "$tls_cert_selfsigned_subject" \
      -days 730 \
      -keyout $server_certificate_key_path \
      -out $server_certificate_path \
      -extensions v3_ca \
      -config <( \
      printf "%s\n" \
      "[req]" \
      "distinguished_name=req" \
      "[v3_ca]" \
      "keyUsage = digitalSignature, keyEncipherment" \
      "extendedKeyUsage = serverAuth, clientAuth, codeSigning" \
      "subjectAltName=DNS:$tls_cert_selfsigned_san")
fi


cat > /etc/gitlab/gitlab.rb <<EOF
external_url "https://$${dns_fqdn}"
nginx['redirect_http_to_https'] = 'true'
nginx['ssl_certificate'] = '$server_certificate_path'
nginx['ssl_certificate_key'] = '$server_certificate_key_path'
gitlab_rails['initial_root_password'] = '$(ssm_get_parameter $ssm_parameter_root_password)'
gitlab_rails['initial_shared_runners_registration_token'] = '$(ssm_get_parameter $ssm_parameter_runner_registration_token)'
gitlab_rails['backup_upload_connection'] = {
  'provider' => 'AWS',
  'region' => '$backups_s3_bucket_region',
  'use_iam_profile' => true
}
gitlab_rails['backup_upload_remote_directory'] = '$backups_s3_bucket'
gitlab_rails['backup_path'] = '$backups_local_path'
gitlab_rails['monitoring_whitelist'] = ['0.0.0.0/0']
$(if [ ! -z $HTTP_PROXY ]; then
    echo "gitlab_rails['env'] = { \"http_proxy\" => \"$http_proxy\", \"https_proxy\" => \"$https_proxy\", \"no_proxy\" => \"$no_proxy\" }"
    echo "gitaly['env'] = { \"http_proxy\" => \"$http_proxy\", \"https_proxy\" => \"$https_proxy\", \"no_proxy\" => \"$no_proxy\" }"
    echo "gitlab_workhorse['env'] = { \"http_proxy\" => \"$http_proxy\", \"https_proxy\" => \"$https_proxy\", \"no_proxy\" => \"$no_proxy\" }"
    echo "registry['env'] = { \"http_proxy\" => \"$http_proxy\", \"https_proxy\" => \"$https_proxy\", \"no_proxy\" => \"$no_proxy\" }"
  fi
)
EOF

chmod 0600 /etc/gitlab/gitlab.rb


#### cloud-init blocks gitlab-runsvdir (executed by gitlab-ctl reconfigure)
#### workaround this issue with a post install cron task

cat > /usr/local/bin/postinstall.sh <<EOF
#!/bin/bash -x

exec > /tmp/postinstall.sh.log 2>&1

#### setup environment
export PATH=/usr/local/bin:\$PATH
source /etc/profile.d/helper-functions.sh

# restore config
restore_enabled=$restore_enabled
restore_s3_file=$restore_s3_file
backups_local_path=$backups_local_path


# aws secretsmanager config
aws_region=$aws_region
secretsmanager_secret_gitlab_secrets_json=$secretsmanager_secret_gitlab_secrets_json
gitlab_secrets_json_local_path=$gitlab_secrets_json_local_path

export AWS_DEFAULT_REGION=\$aws_region

until systemctl is-active multi-user.target; do
  echo "waiting for is-active multi-user.target..."
  sleep 5
done

# run the postinstall cron task once
rm -f /etc/cron.d/postinstall

gitlab-ctl reconfigure
systemctl restart gitlab-runsvdir

# wait for gitlab to come online
waitfor_gitlab_ok

# make sure gitlab is still up before proceeding with restore
sleep 20
waitfor_gitlab_ok

# when restore_enabled is true, restore from s3 backup and secretsmanager
if [ "\$restore_enabled" == "true" ]; then
  gitlab_restore_from_s3 \\
    \$restore_s3_file \\
    \$backups_local_path \\
    \$secretsmanager_secret_gitlab_secrets_json \\
    \$gitlab_secrets_json_local_path
else
  create_or_update_secret \\
    \$secretsmanager_secret_gitlab_secrets_json \\
    file://\$gitlab_secrets_json_local_path
fi

EOF

chmod 0700 /usr/local/bin/postinstall.sh
chown root:root /usr/local/bin/postinstall.sh
echo "* * * * * root . /etc/profile; /usr/local/bin/postinstall.sh" > /etc/cron.d/postinstall



#### setup backup cron jobs
# https://docs.gitlab.com/ee/raketasks/backup_restore.html#configuring-cron-to-make-daily-backups
echo "0 7 * * * root . /etc/profile; gitlab-backup create DIRECTORY=daily" > /etc/cron.d/gitlab-backup
